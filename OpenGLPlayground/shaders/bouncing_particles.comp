/**
 * @file bouncing_particles.comp
 * 
 * Compute shader which updates positions and velocities
 * of falling particles which bounce when they hit a floor plane
 *
 * @author Lonnie L. Souder II
 * @date 08/01/2019
 */
#version 430 core

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

/** The buffer containing the positions of all of the particles */
layout(std140, binding = 4) buffer aPos
{
	vec4 position[];
};

/** The buffer containing the velocities of the particles */
layout(std140, binding = 5) buffer aVel
{
	vec4 velocity[];
};

/** The buffer containing the colors of the particles */
layout(std140, binding = 6) buffer aCol
{
	vec4 color[];
};

/**
 * Defines a plane 
 */
struct Plane 
{
	vec3 P; //< Any point on the plane
	vec3 N; //< Vector normal to the plane
};

/** Acceleration due to gravity */
const vec3 g = vec3(0.0f, -9.8f, 0.0f);

/** Specifies the floor */
const Plane ground = 
{
	vec3(0.0f, -0.75f, 0.0f),
	vec3(0.0f, 1.0f, 0.0f),
};

/** Percentage of energy conserved on bounce */
uniform float dampeningFactor = 0.8f;

/** Time passed since the last frame [s] */
uniform float dT = 0.01f;

/** Time speedup factor */
uniform float timeScale = 1.0f;

/**
 * Calculates the new velocity of a particle
 * after it has bounced off of a surface
 *
 * @param vin The velocity before the bounce
 * @param n The normal vector of the surface
 * @return The velocity of the particle after the bounce
 */
vec3 Bounce(vec3 vin, vec3 n)
{
	return reflect(vin, normalize(n)) * dampeningFactor;
};

/**
 * Computes the distance from a plane to a point along the plane normal
 *
 * @param p Point in question
 * @param s Plane from which to measure
 * @return Distance from plane to point along the plane normal
 */
float ComputeDistanceAlongNormal(vec3 p, Plane s)
{
	return dot(normalize(s.N), p - s.P);
}

/**
 * Calculates whether or not a point is below the surface
 *
 * @param p Point in question
 * @param s Surface in question
 * @return True if the point is below or on the plane; otherwise false
 */
bool IsBelowSurface(vec3 p, Plane s)
{
	float D = ComputeDistanceAlongNormal(p, s);
	return  D <= 0;
}

void main()
{
	float t = dT * timeScale;
	vec3 p = position[gl_GlobalInvocationID.x].xyz;
	vec3 v = velocity[gl_GlobalInvocationID.x].xyz;

	// p' = p + vt + 1/2 g t^2
	vec3 pp = p + (v*t) + (0.5f * g * t * t);

	//v' = v + gt
	vec3 vp = v + (g*t);

	if (IsBelowSurface(pp, ground))
	{
		vp = Bounce(vp, ground.N);
		pp = p + (vp*t) + (0.5f * g * t * t);
	}

	position[gl_GlobalInvocationID.x].xyz = pp;
	velocity[gl_GlobalInvocationID.x].xyz = vp;
}