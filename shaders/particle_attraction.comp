/**
 * @file particle_attraction.comp
 * 
 * Compute shader which updates positions and velocities
 * of falling particles with multiple external forces
 *
 * @author Lonnie L. Souder II
 * @date 08/01/2019
 */
#version 430 core
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

layout(local_size_x=1024, local_size_y=1, local_size_z=1) in;

/** The buffer containing the positions of all of the particles */
layout(std140, binding = 4) buffer aPos
{
	vec4 position[];
};

/** The buffer containing the velocities of the particles */
layout(std140, binding = 5) buffer aVel
{
	vec4 velocity[];
};

/** The buffer containing the colors of the particles */
layout(std140, binding = 6) buffer aCol
{
	vec4 color[];
};

/**
 * Contains all relevant information for a point mass
 */
struct Particle
{
	vec3 position;
	float mass;
};

/** Acceleration due to gravity */
const vec3 g = vec3(0.0f, 0.0f, 0.0f);

/** Gravitational constant [m^3 / (s^2 * kg)] */
const float G = 6.67 * pow(10, -11);

/**  Mass of every particle */
uniform float particleMass = 1.0f;

uniform float maxVelocity = 200.0f;
uniform float maxAcceleration = 20.0f;

/** Time passed since the last frame [s] */
uniform float dT = 0.01f;

/** Time speedup factor */
uniform float timeScale = 1.0f;

const int NUM_ATTRACTORS = 3;

uniform Particle attractors[NUM_ATTRACTORS] =
{
	Particle(vec3(0.0f, 10.0f, 0.0f),	1000000000000000.0f),
	Particle(vec3(-7.07f, -7.07f, 0.0f),1000000000000000.0f),
	Particle(vec3(7.07f, -7.07f, 0.0f), 1000000000000000.0f),
};

uniform mat4 uProjMatrix = mat4(1.0f);
uniform mat4 uViewMatrix = mat4(1.0f);
uniform mat4 uModelMatrix = mat4(1.0f);

/**
 * Calculates the gravitational force between two point masses
 *
 * Note:	A particle with negative mass will reverse the direction of the force.
 *			Two particles with negative mass will behave normally
 *
 * @param p1 Point mass 1
 * @param p2 Point mass 2
 * @return	A vector pointing from p2 to p1 with magnitude equal to 
 *			the gravitational force between them
 */
vec3 GravitationalForce(Particle p1, Particle p2)
{
	float F = G * (p1.mass * p2.mass)/pow(length(p2.position-p1.position), 2.0f);
	return F * normalize(p2.position - p1.position);
}

void main()
{
	float t = dT * timeScale;
	vec3 p = position[gl_GlobalInvocationID.x].xyz;
	vec3 v = velocity[gl_GlobalInvocationID.x].xyz;
	Particle particle = Particle(p, particleMass);

	vec3 F = vec3(0.0f, 0.0f, 0.0f);
	for (int i = 0; i < NUM_ATTRACTORS; i++)
	{
		F += GravitationalForce(particle, attractors[i]);
	}

	vec3 a = g + (F/particle.mass);
	a = normalize(a) * clamp(length(a), 0, maxAcceleration);

	// p' = p + vt + 1/2 g t^2
	vec3 pp = p + (v*t) + (0.5f * a * t * t);

	//v' = v + gt
	vec3 vp = v + (a*t);
	vp = normalize(vp) * clamp(length(vp), 0, maxVelocity);

	position[gl_GlobalInvocationID.x].xyz = pp;
	velocity[gl_GlobalInvocationID.x].xyz = vp;

	vec3 scaledV = abs(vp/(maxVelocity*0.5f));
	color[gl_GlobalInvocationID.x].xyzw = vec4(scaledV, 1.0f);
}